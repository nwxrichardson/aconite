import "util.eol";

pre {
	var annotations = Source.allContents.selectByType(Source!EAnnotation);
	var randomStyle = new Target!SquareDescription;
	var colorPalette = randomStyle.color.eContainer.entries;
	delete randomStyle;
}

//TODO Create a default option
operation Source!EAnnotation getVal(key : String) : String{

	var tmp = self.details.selectOne(i|i.key = key);
	if (tmp.isDefined()){
	return tmp.value;
	}
	return "";

}

operation Source!EAnnotation getVal(key : String, def : String) : String{

	var rtn = self.getVal(key);
	if (rtn != ""){return rtn;}
	return def;

}

operation Source!EClass getDC() : String {
	return self.ePackage.name + "::" + self.name;
}

//TODO Fix to work for multi-level	
operation Source!EClass getRoute(target : Source!EClass) : String {
	self.println();
	target.println();
	var seen = Set{self};
	var routes = self.eAllReferences.aggregate(i|i.eType,"." + i.name);
	routes.keySet();
	while ((not routes.containsKey(target))){
	seen.addAll(routes.keySet());
	var newRoutes = new Map;
	for (i in routes.keySet()){
		newRoutes.putAll(i.eAllReferences.aggregate(j|j.eType,routes.get(i) + "." + j.name ));
	}
	for (i in seen){
		newRoutes.remove(i);
	}
	routes = newRoutes;
	}
	return routes.get(target);
}

rule Package
	transform 	s : Source!EPackage
	to 			t : Target!Group {
	var viewpoint = new Target!Viewpoint;
	t.ownedViewpoints.add(viewpoint);
	var diagrams = annotations.select(i|i.Source = "sirius.diagram").equivalent();
	viewpoint.ownedRepresentations.addAll(diagrams);	
	}


@lazy
rule DiagramFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!DiagramDescription {
	
	guard : s.Source = "sirius.diagram"
	var element = s.eModelElement;
	t.domainClass = element.getDC();
	t.name = s.getVal("name");
	var defaultLayer = new Target!Layer;
	defaultLayer.name = "Default";
	t.defaultLayer = defaultLayer;
	defaultLayer.nodeMappings.addAll(annotations.select(i|i.getVal("container") = t.name).select(i|i.Source = "sirius.node").equivalent());
	defaultLayer.edgeMappings.addAll(annotations.select(i|i.getVal("container") = t.name).select(i|i.Source = "sirius.edge").equivalent());
	defaultLayer.containerMappings.addAll(annotations.select(i|i.getVal("container") = t.name).select(i|i.Source = "sirius.container").equivalent());
	}

@lazy
rule NodeFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!NodeMapping {
	
	guard : s.Source = "sirius.node"
	
	var element = s.eModelElement;
	var container = annotations.selectOne(i|i.getVal("name") = s.getVal("container")).eModelElement;
	t.domainClass = element.getDC();
	t.name = s.getVal("name");
	t.semanticCandidatesExpression = "aql:self" + container.getRoute(element);
	t.style = new Target!SquareDescription;
	t.style.resizeKind = Target!ResizeKind#NSEW;
	t.style.labelPosition = Target!LabelPosition#node;
	t.style.labelExpression = "aql:self." + s.getVal("label","name");
	t.style.showIcon = false;
	t.style.color = s.getVal("color", "light_yellow").getColor();
	}
	
	@lazy
rule ContainerFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!ContainerMapping {
	
	guard : s.Source = "sirius.container"
	
	var element = s.eModelElement;
	var container = annotations.selectOne(i|i.getVal("name") = s.getVal("container")).eModelElement;
	t.domainClass = element.getDC();
	t.name = s.getVal("name");
	t.semanticCandidatesExpression = "aql:self" + container.getRoute(element);
	t.style = new Target!FlatContainerStyleDescription;
	t.style.labelExpression = "aql:self." + s.getVal("label","name");
	t.style.showIcon = false;
	defaultLayer.subNodeMappings.addAll(annotations.select(i|i.getVal("container") = t.name).select(i|i.Source = "sirius.node").equivalent());
	defaultLayer.subContainerMappings.addAll(annotations.select(i|i.getVal("container") = t.name).select(i|i.Source = "sirius.container").equivalent());
	}
	
	@lazy
rule RefEdgeFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!EdgeMapping {
	
	guard : s.Source = "sirius.edge" and s.eModelElement.isTypeOf(Source!EReference)
	
	var element = s.eModelElement;
	var container = annotations.selectOne(i|i.getVal("name") = s.getVal("container")).eModelElement;
	
	t.name = s.getVal("name", element.name);
	t.sourceMapping = annotations.select(i|i.eModelElement = element.eContainingClass).equivalent();
	t.targetMapping = annotations.select(i|i.eModelElement = element.eType).equivalent();
	t.targetFinderExpression = "aql:self." +  element.name;
	t.style = new Target!EdgeStyleDescription;	
	t.style.endsCentering = Target!CenteringStyle#Both;
	var label = s.getVal("label");
	if (label != ""){
	t.style.centerLabelStyleDescription = new Target!CenterLabelStyleDescription;
	t.style.centerLabelStyleDescription.labelExpression = "aql:self." + label;
	t.style.centerLabelStyleDescription.showIcon = false;
	}
	}
	
	@lazy
rule EleEdgeFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!EdgeMapping {
	
	guard : s.Source = "sirius.edge" and s.eModelElement.isTypeOf(Source!EClass)
	
	var element = s.eModelElement;
	var container = annotations.selectOne(i|i.getVal("name") = s.getVal("container")).eModelElement;
	
	t.useDomainElement = true;
	t.name = s.getVal("name", element.name);
	t.domainClass = element.getDC();
	t.sourceMapping = annotations.select(i|i.eModelElement = element.eAllReferences.selectOne(j|j.name = s.getVal("source")).eType).equivalent();
	t.targetMapping = annotations.select(i|i.eModelElement = element.eAllReferences.selectOne(j|j.name = s.getVal("target")).eType).equivalent();
	t.sourceFinderExpression = "aql:self." +  s.getVal("source");
	t.targetFinderExpression = "aql:self." +  s.getVal("target");
	t.style = new Target!EdgeStyleDescription;	
	t.style.endsCentering = Target!CenteringStyle#Both;
	var label = s.getVal("label");
	if (label != ""){
	t.style.centerLabelStyleDescription = new Target!CenterLabelStyleDescription;
	t.style.centerLabelStyleDescription.labelExpression = "aql:self." + label;
	t.style.centerLabelStyleDescription.showIcon = false;
	}
	}
	
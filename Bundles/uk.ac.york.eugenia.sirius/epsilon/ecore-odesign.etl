import "util.eol";

pre {
	var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
	var annotations = Source.allContents.selectByType(Source!EAnnotation);
	var newAnnotations = new Sequence;
	for (i in annotations){
		var containers = i.getVals("container");
		if (containers.size() != 1){
			for (j in containers){
				var `new` = emfTool.getECoreUtil.copy(i);
				`new`.details.put("container",j);
				`new`.eModelElement = i.eModelElement;
				newAnnotations.add(`new`);
			} delete i;
		} 
	} annotations.addAll(newAnnotations);
	var randomStyle = new Target!SquareDescription;
	var colorPalette = randomStyle.color.eContainer.entries;
	delete randomStyle;
	
}

operation Source!EAnnotation getVal(key : String) : String{

	var tmp = self.details.selectOne(i|i.key = key);
	if (tmp.isDefined()){
	return tmp.value;
	}
	return "";

}

operation Source!EAnnotation getVal(key : String, def : String) : String{

	var rtn = self.getVal(key);
	if (rtn != ""){return rtn;}
	return def;

}


operation Source!EAnnotation getVals(key : String) : Sequence{
	var tmp = self.details.selectOne(i|i.key = key);
	if (tmp.isDefined()){
	return tmp.value.split(",").collect(i|i.trim());
	}
	return Sequence{""};
}
operation Source!EAnnotation getVals(key : String, def : String) : Sequence{
	var rtn = self.getVals(key);
	if (rtn != Sequence{""}){return rtn;}
	return Sequence(def);
}

operation Source!EClass getDC() : String {
	return self.ePackage.name + "::" + self.name;
}
	
operation Source!EClass getRoute(target : Source!EClass) : String {
	var seen = Set{self};
	var routes = self.eAllReferences.aggregate(i|i.eType,"." + i.name);
	routes.keySet();
	while ((not routes.containsKey(target))){
	seen.addAll(routes.keySet());
	var newRoutes = new Map;
	for (i in routes.keySet()){
		newRoutes.putAll(i.eAllReferences.aggregate(j|j.eType,routes.get(i) + "." + j.name ));
	}
	for (i in seen){
		newRoutes.remove(i);
	}
	routes = newRoutes;
	}
	return routes.get(target);
}

rule Package
	transform 	s : Source!EPackage
	to 			t : Target!Group {
	var viewpoint = new Target!Viewpoint;
	t.ownedViewpoints.add(viewpoint);
	var diagrams = annotations.select(i|i.Source = "sirius.diagram").equivalent();
	viewpoint.ownedRepresentations.addAll(diagrams);	
	}

/*
 *----------------------------------------------------------------------------------
 *      SIRIUS ELEMENTS
 *----------------------------------------------------------------------------------
 */


@lazy
rule DiagramFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!DiagramDescription {
	
	guard : s.Source = "sirius.diagram"
	var element = s.eModelElement;
	t.domainClass = element.getDC();
	t.name = s.getVal("name");
	var defaultLayer = new Target!Layer;
	defaultLayer.name = "Default";
	t.defaultLayer = defaultLayer;
	defaultLayer.nodeMappings.addAll(annotations.select(i|i.getVal("container") = t.name).select(i|i.Source = "sirius.node").equivalent());
	defaultLayer.edgeMappings.addAll(annotations.select(i|i.getVal("container") = t.name).select(i|i.Source = "sirius.edge").equivalent());
	defaultLayer.containerMappings.addAll(annotations.select(i|i.getVal("container") = t.name).select(i|i.Source = "sirius.container").equivalent());
	}
	

@abstract
rule AbstractNodeFromAnnotation 
	transform 	s : Source!EAnnotation
	to 			t : Target!AbstractNodeMapping {
	
	t.name = s.getVal("name");
	
	var styleAnnotation = emfTool.getECoreUtil.copy(s);
	styleAnnotation.Source = s.source + ".description" ;
	t.style = styleAnnotation.equivalent();	
	
	}
	
@lazy
rule NodeFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!NodeMapping 
	extends AbstractNodeFromAnnotation{
	
	guard : s.Source = "sirius.node"
	
	var element = s.eModelElement;
	var container = annotations.selectOne(i|i.getVal("name") = s.getVal("container")).eModelElement;
	t.domainClass = element.getDC();
	t.semanticCandidatesExpression = "aql:self" + container.getRoute(element);
	
	}
	
@lazy
rule ContainerFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!ContainerMapping 
	extends AbstractNodeFromAnnotation{
	
	guard : s.Source = "sirius.container"
	
	var element = s.eModelElement;
	var container = annotations.selectOne(i|i.getVal("name") = s.getVal("container")).eModelElement;
	
	t.domainClass = element.getDC();
	t.semanticCandidatesExpression = "aql:self" + container.getRoute(element);
	
	t.subNodeMappings.addAll(annotations.select(i|i.getVal("container") = t.name).select(i|i.Source = "sirius.node").equivalent());
	t.subContainerMappings.addAll(annotations.select(i|i.getVal("container") = t.name).select(i|i.Source = "sirius.container").equivalent());
	
	}


@abstract
rule AbsEdgeFromAnnotation	
	transform 	s : Source!EAnnotation
	to 			t : Target!EdgeMapping {
	guard : s.Source = "sirius.edge"
	
	t.name = s.getVal("name", element.name);
		t.style = new Target!EdgeStyleDescription;	
	t.style.endsCentering = Target!CenteringStyle#Both;
	var label = s.getVal("label");
	if (label != ""){
	t.style.centerLabelStyleDescription = new Target!CenterLabelStyleDescription;
	t.style.centerLabelStyleDescription.labelExpression = "aql:self." + label;
	t.style.centerLabelStyleDescription.showIcon = false;
	}
	}
	
@lazy
rule RefEdgeFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!EdgeMapping 
	extends AbsEdgeFromAnnotation {
	guard : s.eModelElement.isTypeOf(Source!EReference)
	
	//TODO Make this work the way one would expect
	var element = s.eModelElement;
	var container = annotations.selectOne(i|i.getVal("name") = s.getVal("container")).eModelElement;

	t.sourceMapping = annotations.select(i|i.eModelElement = element.eContainingClass).equivalent();
	t.targetMapping = annotations.select(i|i.eModelElement = element.eType).equivalent();
	t.targetFinderExpression = "aql:self." +  element.name;
	}
	
@lazy
rule EleEdgeFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!EdgeMapping 
	extends AbsEdgeFromAnnotation {
	
	guard : s.eModelElement.isTypeOf(Source!EClass)
	
	var element = s.eModelElement;
	var container = annotations.selectOne(i|i.getVal("name") = s.getVal("container")).eModelElement;
	
	t.useDomainElement = true;
	t.domainClass = element.getDC();
	t.sourceMapping = annotations.select(i|i.eModelElement = element.eAllReferences.selectOne(j|j.name = s.getVal("source")).eType).equivalent();
	t.targetMapping = annotations.select(i|i.eModelElement = element.eAllReferences.selectOne(j|j.name = s.getVal("target")).eType).equivalent();
	t.sourceFinderExpression = "aql:self." +  s.getVal("source");
	t.targetFinderExpression = "aql:self." +  s.getVal("target");

	}

/*
 *----------------------------------------------------------------------------------
 *      ABSTRACT META SIRIUS STYLES 
 *----------------------------------------------------------------------------------
 */	

@abstract
rule BorderedStyleFromAnnotation
	transform s : Source!EAnnotation
	to t : Target!BorderedStyleDescription{
	t.borderColor = s.getVal("border_color","black").getColor();
	t.borderLineStyle = Target!LineStyle#dot.VALUES.selectOne(i|i.literal = s.getVal("border_line_style","solid"));
	t.borderSizeComputationExpression = "aql:" + s.getVal("border_size", "2");
	}
	
	//TODO Do a readability function that 
@abstract
rule LabelStyleFromAnnotation
	transform s : Source!EAnnotation
	to t : Target!LabelStyleDescription{
	t.iconPath = s.getVal("icon_path","");
	t.labelAlignment = Target!LabelAlignment#CENTER.VALUES.selectOne(i|i.literal = s.getVal("label_alignment","CENTER"));
	t.labelColor = s.getVal("label_colour","black").getColor();
	t.labelExpression = "aql:self." + s.getVal("label","name");
	t.labelFormat = Target!FontFormat#bold.VALUES.select(i|s.getVals("border_line_style").exists(j|j = i.literal));
	t.labelSize = s.getVal("label_size","12").asInteger();
	t.showIcon = s.getVal("show_icon","false").asBoolean();
	}

@abstract
rule TooltipFromAnnotation
	transform s : Source!EAnnotation
	to t : Target!TooltipStyleDescription{
	t.tooltipExpression = s.getVal("tooltip");
	}
	
@abstract
rule RoundedCornerFromAnnotation
	transform s : Source!EAnnotation
	to t : Target!TooltipStyleDescription{
	t.arcHeight = s.getVal("arc_height","1").asInteger();
	t.arcWidth = s.getVal("arc_width","1").asInteger();
	}

/*
 *----------------------------------------------------------------------------------
 *      ABSTRACT SIRIUS STYLES 
 *----------------------------------------------------------------------------------
 */	

@abstract
rule NodeStyleFromAnnotation
	transform s : Source!EAnnotation
	to t : Target!NodeStyleDescription
	extends BorderedStyleFromAnnotation, LabelStyleFromAnnotation , TooltipFromAnnotation
	{
	guard : s.source = "sirius.node.description"
	t.forbiddenSides = Target!Side#NORTH.VALUES.select(i|s.getVals("forbidden_sides").exists(j|j = i.literal));
 	t.hideLabelByDefault = s.getVal("hide_label_by_default","false").asBoolean();
 	t.iconPath = s.getVal("icon_path");
 	t.labelPosition = Target!LabelPosition#node.VALUES.selectOne(i|i.literal = s.getVal("label_position","node"));
 	t.resizeKind = Target!ResizeKind#NSEW.VALUES.selectOne(i|i.literal = s.getVal("resize_kind","NSEW"));
	t.sizeComputationExpression = s.getVal("size_computation_expression","3");
	}
	
@abstract
rule ContainerStyleFromAnnotation
	transform s : Source!EAnnotation
	to t : Target!ContainerStyleDescription
	extends BorderedStyleFromAnnotation, LabelStyleFromAnnotation , TooltipFromAnnotation , RoundedCornerFromAnnotation
	{
	guard : s.source = "sirius.container.description"
	t.forbiddenSides = Target!Side#NORTH.VALUES.select(i|s.getVals("forbidden_sides").exists(j|j = i.literal));
 	t.hideLabelByDefault = s.getVal("hide_label_by_default","false").asBoolean();
 	t.iconPath = s.getVal("icon_path");
	t.heightComputationExpression = s.getVal("height_computation_expression","-1");
	t.widthComputationExpression = s.getVal("width_computation_expression","-1");
	t.roundedCorner = s.getVal("rounded_corner", "false").asBoolean();
	}
	
/*
 *----------------------------------------------------------------------------------
 *      SIRIUS STYLES 
 *----------------------------------------------------------------------------------
 */		
	
@lazy
rule FlatContainerFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!FlatContainerStyleDescription 
	extends ContainerStyleFromAnnotation{
	guard : s.getVal("shape") = "flat" or s.getVal("shape") = ""
	
	t.backgroundColor = s.getVal("background_color",s.getVal("color", "light_yellow")).getColor();
	t.foregroundColor = s.getVal("foreground_color",s.getVal("color", "light_yellow")).getColor();
	t.backgroundStyle = Target!BackgroundStyle#Liquid.VALUES.selectOne(i|i.literal = s.getVal("background_style","GradientLeftToRight"));
	
	}
	
@lazy
rule ShapeContainerFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!ShapeContainerStyleDescription 
	extends ContainerStyleFromAnnotation{
	guard : s.getVal("shape") = "shape"
	
	t.backgroundColor = s.getVal("color", "light_yellow").getColor();
	//Pointless
	t.shape = Target!ContainerShape#parallelogram.VALUES.selectOne(i|i.literal = s.getVal("shape","parallelogram"));
	
	}

@lazy
rule SquareNodeFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!SquareDescription 
	extends NodeStyleFromAnnotation{
	guard : s.getVal("shape") = "square" or s.getVal("shape") = ""
	
	t.color = s.getVal("color", "light_yellow").getColor();
	t.height = s.getVal("height","0").asInteger();
	t.width = s.getVal("width","0").asInteger();
	
	}
	
@lazy
rule DotNodeFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!DotDescription 
	extends NodeStyleFromAnnotation{
	guard : s.getVal("shape") = "dot"
	
	t.backgroundColor = s.getVal("color","light_yellow").getColor();
	t.strokeSizeComputationExpression = s.getVal("stroke_size_computation_expression","2").asInteger();
	
	}
	
@lazy
rule EllipseNodeFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!EllipseNodeDescription 
	extends NodeStyleFromAnnotation{
	guard : s.getVal("shape") = "ellipse"
	//Maybe make a colourable rule
	t.color = s.getVal("color", "light_yellow").getColor();
	t.horizontalDiameterComputationExpression = s.getVal("horizontal_diameter_computation_expression","2").asInteger();
	t.verticalDiameterComputationExpression = s.getVal("vertical_diameter_computation_expression","2").asInteger();
	}
	
//@lazy
//rule GaugeNodeFromAnnotation
//	transform 	s : Source!EAnnotation
//	to 			t : Target!GuageDescription 
//	extends NodeStyleFromAnnotation{
//	guard : s.getVal("shape") = "ellipse"
//	
//	t.alightment Enum
//	}

@lazy
rule LozengeNodeFromAnnotation
	transform 	s : Source!EAnnotation
	to 			t : Target!LozengeNodeDescription 
	extends NodeStyleFromAnnotation{
	guard : s.getVal("shape") = "ellipse"
	//Maybe make a colourable rule
	t.color = s.getVal("color", "light_yellow").getColor();
	t.heightComputationExpression = s.getVal("height_computation_expression","2").asInteger();
	t.widthComputationExpression = s.getVal("width_computation_expression","2").asInteger();
	}

import "util.eol";

//Needed?

// Note: Whichever one needs to access its default should be put first in the java code
operation Target!EAnnotation getDefault(key : String) : String {
//	key.println();
//	self.details.println();
	switch (key){
		case "name"	: return self.eModelElement.name;
		case "createElements" 	: return "true";	
		case "synchronizationLock" 	: return "false";	
		case "color" 	: return "light_yellow";
		case "height" 	: return "0";	
		case "width" 	: return "0";
		case "roundedCorner" 	: return "false";
		case "heightComputationExpression"	: return "-1";
		case "widthComputationExpression"	: return "-1";
		case "sizeComputationExpression" : return "3";
		case "resizeKind"	: return "NSEW";
		case "labelPosition"	: return "node";
		case "labalExpression"	: return "aql:self.name";
		case "hideLabelByDefault"	: return "false";
		case "arcHeight"	: return "1";
		case "arcWidth"	: return "1";
		case "showIcon"	: return "false";
		case "label"	: return self.getVal("name");
		case "labelSize"	: return "12";
		case "labelColor"	: return "black";
		case "labelExpression"	: return "name";
		case "labelAlignment"	: return "CENTER";
		case "borderSize"	: return "2";
		case "borderLineStyle"	: return "solid";
		case "borderColor"	: return "black";
		case "hideSubMappings"	: return "true";
		case "inheritsAncestorFilters"	: return "true";
		case "borderSizeComputationExpression"	: return "aql:2";
		case "importedMapping"	: return self.getVal("import");
		case "abstract"	: return "false";
		case "proxyType"	: return "Diagram";
		case "proxyStatement"	: return "aql:diagram.target";
		case "reconnectable"	: return "false";
		case "semanticCandidatesExpression"	: { if (self.eModelElement.isTypeOf(Source!EClass) or self.eModelElement.isTypeOf(Target!EClass)){ 
		return "aql:self" + annotations.selectOne(i|i.getVal("name") = self.getVal("container")).eModelElement.getRoute(self.eModelElement);
		} else {return "";}
		}
		case "targetFinderExpression" : return "aql:self." + self.getVal("targetFinder");
		case "targetFinder" : {
			if (self.eModelElement.isTypeOf(Source!EReference) or self.eModelElement.isTypeOf(Target!EReference)){
				return self.eModelElement.name + self.getVal("target").dot();
			} else {
				return self.getVal("target").dot();
			}
		}
		default : return "";
	}
}

operation String dot() : String {
	if (self != "") {return "."+self;}
	return self;
}

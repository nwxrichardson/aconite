pre {
// "Running...".println();
}

post {
// "Done...".println();
}

context EAnnotation {

	critique ContainerIsName {
		check : self.getVals("container") = Sequence{""} or self.getVals("container").forAll(i| EAnnotation.all.exists(j|j.getVal("name") = i))
		message : self.toString() + "container is not a name"
			fix {
			title : "Choose new container"
			do {
				UserInput.choose("Select new container?", EAnnotation.all.select(i|i.source = "sirius.container" or i.source = "sirius.diagram").toString());
			}
		} 
		}
	
	critique ImportExists {
		check : self.details.get("extend") = "" or EAnnotation.all.exists(i|i.details.get("name") = self.details.get("extend"))
		message : self.details.get("name") + '\'s import does not exist.'
	}

	critique UniqueName {
		check : EAnnotation.all.atMostNMatch(i|i.details.get("name") = self.details.get("name"),1)
		message : "One or more annotations share the name: " + self.getVal("name") 
	}
	
	critique HasName {
		guard : self.source = "sirius"
		check : self.getVal("name") != ""
		message :  " requires a name"
	}
	
	critique EdgeDirectlyInDiagram {
		guard : self.source = "sirius.edge"
		check : EAnnotation.all.select(i|i.source = "sirius.diagram").exists(i|self.getVals("container").exists(j|j = i.details.get("name")))
	}
	
	critique ValidColor {
		guard : self.getVal("color") != "" 
		check : self.getVal("color").isColor()
	}
	
	critique showIconIsBoolean{
		check : self.getVal("showIcon") = "" or self.getVal("showIcon").isBoolean()	
		message : "showIcon requires a Boolean"
	}
	
	critique labelSizeIsInteger{
		check : self.getVal("labelSize") = "" or self.getVal("labelSize").isInteger()	
		message : "labelSize requires an Integer"
	}
}

operation EAnnotation getVals(key : String) : Sequence{
	var tmp = self.details.selectOne(i|i.key = key);
	if (tmp.isDefined()){
	return tmp.value.split(",").collect(i|i.trim());
	}
	return Sequence{""};
}

operation EAnnotation getVal(key : String) : String{

	var tmp = self.details.selectOne(i|i.key = key);
	if (tmp.isDefined()){
	return tmp.value;
	}
	return "";

}

operation String isBoolean() : Boolean{
	if (self = "true" or self = "false") {return true;} return false;
}

operation String isColor() : Boolean{
	var colors = Sequence{"black","white", "chocolate", "gray", "green", "orange", "purple", "red", "yellow", "blue" 
							, "light_chocolate", "light_gray", "light_green", "light_orange", "light_purple", "light_red", "light_yellow", "light_blue"
							, "dark_chocolate", "dark_gray", "dark_green", "dark_orange", "dark_purple", "dark_red", "dark_yellow", "dark_blue"};
	return colors.contains(self);
}

operation EAnnotation toString() : String {
	var rtn = "@";
	rtn += self.source+ "{";
	for (entry : EStringToStringMapEntry in self.details){
		rtn += entry.key + " = " + entry.value + ", ";
	}
	rtn += "}";
	return rtn;
}



pre {
	// "Running...".println();
	var inDiagram = EAnnotation.all.select(i|i.source = "aconite.diagram").collect(i|i.getVal("name")).asSet();
	var size = 0;
	while (inDiagram.size() != size){
		size = inDiagram.size();
		inDiagram.addAll(EAnnotation.all.select(i|inDiagram.containsAll(i.getVals("container"))).collect(i|i.getVal("name")));
	}
}

post {
	// "Done...".println();
}

context EPackage {
	critique UniqueName {
		check {
		var names = EAnnotation.all.collect(i|i.details.get("name")).select(i|i.isTypeOf(String));
		names = names.reject(i|names.atMostNMatch(j|j = i,1));
		return names.size() = 0;
		}
		message : "One or more annotations share the name(s): " + names.asSet().toList()
	}
}

context EAnnotation {
	guard : not self.getVal("abstract").asBoolean()
	
	critique ContainerIsName {
		check : self.getVals("container") = Sequence{""} or self.getVals("container").forAll(i| EAnnotation.all.exists(j|j.getVal("name") = i))
		message : self.toAnno() + "container is not a name"
		}
	
	constraint ImportExists {
		check : self.details.get("extend") = "" or self.getVals("extend").forAll(i| EAnnotation.all.exists(j|j.getVal("name") = i))
		message : self.details.get("name") + '\'s import does not exist.'
	}
	
	constraint HasName {
		guard : self.source != "aconite"
		check : self.getVal("name") != ""
		message : self.toAnno() + " requires a name"
	}
	
	critique EdgeDirectlyInDiagram {
		guard : self.source = "aconite.edge"
		check : self.dirInDiagram()
		message : self.toAnno() + " edge not directly in diagram"
	}
	
/*
 *----------------------------------------------------------------------------------
 *      TYPES CHECKING
 *----------------------------------------------------------------------------------
 */	
	
	constraint createElementsIsBoolean{
		check : self.getVal("createElements") = "" or self.getVal("createElements").isBoolean()	
		message : "In" + self.toAnno() + "createElements requires a Boolean"
	}
	
	constraint synchronizationLockIsBoolean{
		check : self.getVal("synchronizationLock") = "" or self.getVal("synchronizationLock").isBoolean()	
		message : "In" + self.toAnno() + "synchronizationLock requires a Boolean"
	}
	
	constraint colorIsColor {
		guard : self.getVal("color") != "" 
		check : self.getVal("color").isColor()
		message : self.toAnno() + " has an invalid color"
	}
	
	constraint backgroundColorIsColor {
		guard : self.getVal("backgroundColor") != "" 
		check : self.getVal("backgroundColor").isColor()
		message : self.toAnno() + " has an invalid backgroundColor"
	}
	
	constraint foregroundColorIsColor {
		guard : self.getVal("foregroundColor") != "" 
		check : self.getVal("foregroundColor").isColor()
		message : self.toAnno() + " has an invalid foregroundColor"
	}
	
	constraint heightIsInteger{
		check : self.getVal("height") = "" or self.getVal("height").isInteger()	
		message : "In" + self.toAnno() + "height requires an Integer"
	}
	
	constraint widthIsInteger{
		check : self.getVal("width") = "" or self.getVal("width").isInteger()	
		message : "In" + self.toAnno() + "width requires an Integer"
	}
	
	constraint roundedCornerIsBoolean{
		check : self.getVal("roundedCorner") = "" or self.getVal("roundedCorner").isBoolean()	
		message : "In" + self.toAnno() + "roundedCorner requires a Boolean"
	}
	
	constraint showIconIsBoolean{
		check : self.getVal("showIcon") = "" or self.getVal("showIcon").isBoolean()	
		message : "In" + self.toAnno() + "showIcon requires a Boolean"
	}
	
	constraint labelSizeIsInteger{
		check : self.getVal("labelSize") = "" or self.getVal("labelSize").isInteger()	
		message : "In" + self.toAnno() + "labelSize requires an Integer"
	}
	
	constraint labelColorIsColor {
		guard : self.getVal("labelColor") != "" 
		check : self.getVal("labelColor").isColor()
		message : self.toAnno() + " has an invalid labelColor"
	}
	
	constraint borderColorIsColor {
		guard : self.getVal("borderColor") != "" 
		check : self.getVal("borderColor").isColor()
		message : self.toAnno() + " has an invalid borderColor"
	}
	
	constraint hideSubMappingsIsBoolean{
		check : self.getVal("hideSubMappings") = "" or self.getVal("hideSubMappings").isBoolean()	
		message : "In" + self.toAnno() + "hideSubMappings requires a Boolean"
	}
	
	constraint inheritsAncestorFiltersIsBoolean{
		check : self.getVal("inheritsAncestorFilters") = "" or self.getVal("inheritsAncestorFilters").isBoolean()	
		message : "In" + self.toAnno() + "inheritsAncestorFilters requires a Boolean"
	}
	
	constraint abstractIsBoolean{
		check : self.getVal("abstract") = "" or self.getVal("abstract").isBoolean()	
		message : "In" + self.toAnno() + "abstract requires a Boolean"
	}
	
	constraint reconnectableIsBoolean{
		check : self.getVal("reconnectable") = "" or self.getVal("reconnectable").isBoolean()	
		message : "In" + self.toAnno() + "reconnectable requires a Boolean"
	}
	
	constraint creatableIsBoolean{
		check : self.getVal("creatable") = "" or self.getVal("creatable").isBoolean()	
		message : "In" + self.toAnno() + "creatable requires a Boolean"
	}
	
	constraint directlyEditableIsBoolean{
		check : self.getVal("directlyEditable") = "" or self.getVal("directlyEditable").isBoolean()	
		message : "In" + self.toAnno() + "directlyEditable requires a Boolean"
	}	
	
	critique annotationNotInDiagram{
		guard : self.satisfies("ContainerIsName") and self.getVals("container") != Sequence{""}
		check : inDiagram.contains(self.getVal("name"))		
		message : self.toAnno() + "Not in diagram"
	}
}

/*
 *----------------------------------------------------------------------------------
 *      HELPER OPERATIONS
 *----------------------------------------------------------------------------------
 */	

operation EAnnotation getVals(key : String) : Sequence{
	var tmp = self.details.selectOne(i|i.key = key);
	if (tmp.isDefined()){
	return tmp.value.split(",").collect(i|i.trim());
	}
	return Sequence{""};
}

operation EAnnotation getVal(key : String) : String{

	var tmp = self.details.selectOne(i|i.key = key);
	if (tmp.isDefined()){
		return tmp.value;
	}
	return "";

}

operation String isBoolean() : Boolean{
	if (self = "true" or self = "false") {return true;} return false;
}

operation String isColor() : Boolean{
	var colors = Sequence{"black","white", "chocolate", "gray", "green", "orange", "purple", "red", "yellow", "blue" 
							, "light_chocolate", "light_gray", "light_green", "light_orange", "light_purple", "light_red", "light_yellow", "light_blue"
							, "dark_chocolate", "dark_gray", "dark_green", "dark_orange", "dark_purple", "dark_red", "dark_yellow", "dark_blue"};
	return colors.contains(self);
}

@cached
operation EAnnotation dirInDiagram() : Boolean {
	if (EAnnotation.all.select(i|i.source = "aconite.diagram").exists(i|self.getVals("container").exists(j|j = i.details.get("name")))) {return true;}
			if (self.getVal("container") = ""	){
				return self.getVals("extend").exists(i|EAnnotation.all.selectOne(j|j.getVal("name") = i).dirInDiagram());
			} return false;
}

operation EAnnotation toAnno() : String {
	var rtn = "@";
	rtn += self.source+ "{";
	for (entry : EStringToStringMapEntry in self.details){
		rtn += entry.key + " = " + entry.value + ", ";
	}
	rtn += "}";
	return rtn;
}

operation Set toList() : String {
	var rtn = "";
	var first = true;
	for (ele : String in self) {
		if (first) {rtn += ele; first = false;}
		else {rtn += ", " + ele;}
	} return rtn;
}



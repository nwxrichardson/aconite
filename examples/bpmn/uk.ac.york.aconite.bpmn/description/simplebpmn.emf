@namespace(uri="http://eclipse.org/eugenia/simplebpmn", prefix="sbpmn")
@aconite(iconFolder = "uk.ac.york.aconite.bpmn/svg/")
package SimpleBPMN;

@aconite.diagram(name = "BPD")
class BusinessProcessDiagram {
	val BPMNElement[*] elements;
}

class BPMNElement {
	attr String name;
}

/* SWIMLANES */

abstract class Swimlane extends BPMNElement {
	
}
@aconite.container(name = "Lane", container = "BPD, Group, Pool")
class Lane extends Swimlane {
	val FlowObject[*] flowObjects;
}

@aconite.container(name = "Pool", container = "BPD, Group")
class Pool extends Swimlane {
	val Lane[*] lanes;
}

/* CONNECTING OBJECTS */

@aconite.edge(container = "BPD", name="Link",~abstract = "true",  source = "from", target = "to", color = "black")
abstract class ConnectingObject extends BPMNElement {
	ref FlowObject from;
	ref FlowObject to;
}

@aconite.edge(extend = "Link", lineStyle = "dash", name="Message Flow")
class MessageFlow extends ConnectingObject {
	
}

@aconite.edge(extend = "Link", name="Sequence Flow")
class SequenceFlow extends ConnectingObject {
	
}

@aconite.edge(extend = "Link", lineStlye = "dot", name="Association")
class Association extends ConnectingObject {
	
}

/* FLOW OBJECTS */

@aconite.node(~abstract = "true",container = "Lane", name = "Flow", shape = "image", borderSize = "0")
abstract class FlowObject extends BPMNElement {

}

abstract class Gateway extends FlowObject {
	
}

@aconite.node(extend = "Flow", name = "XOR",  imagePath = "xor-gateway.svg")
class XOR extends Gateway {
	
}

@aconite.node(extend = "Flow", name = "OR",  imagePath = "or-gateway.svg")
class OR extends Gateway {
	
}

@aconite.node(extend = "Flow", name = "AND",  imagePath = "and-gateway.svg")
class AND extends Gateway {
}

@aconite.node(extend = "Flow", name = "Start Event",  imagePath = "start-event.svg")
class StartEvent extends FlowObject {
}

@aconite.node(extend = "Flow", name = "Intermediate Event",  imagePath = "intermediate-event.svg")
class IntermediateEvent extends FlowObject {
}

@aconite.node(extend = "Flow", name = "End Event",  imagePath = "end-event.svg")
class EndEvent extends FlowObject {
}

@aconite.node(name = "Activity", container = "Lane")
class Activity extends FlowObject {

}

/* ARTIFACTS */

abstract class Artifact extends BPMNElement {
	
}

@aconite.node(container = "Lane", name="Data Object", shape = "image", imagePath = "data-object.svg")
class DataObject extends Artifact {
	
}

@aconite.container(container = "BPD", name = "Group")
class Group extends Artifact {
	val BPMNElement[*] elements;
}
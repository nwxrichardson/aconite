pre {
var pend = new Set;
var exs = new Map;
var s = Source.allContents().get(0).matches;
pend.addAll(s);
while (pend.notEmpty()){
	var cur = pend.first();
	pend.addAll(pend.first().submatches);
	pend.remove(cur);
	if (cur.left.isDefined()){
	exs.put(cur.left,cur);
	}
	if (cur.right.isDefined()){
	exs.put(cur.right,cur);
	}
}
}

rule pslFORProject 
	transform s : Source!Match
	to t : Target!matchpsl::matchProject
	{
	guard : s.left.isTypeOf(Source!psl::Project) or s.right.isTypeOf(Source!psl::Project)
	
	if (s.differences.exists(t|t.isTypeOf(Source!AttributeChange))){
		var left = new Target!matchpsl::matchProject;
		left.title = s.left.title;
		left.description = s.left.description;
		t.old = left;
	}
	
	if (s.right.isDefined()) {
		t.title = s.right.title;
		t.description = s.right.description;
	} else {
		t.title = s.left.title;
		t.description = s.left.description;
}
	
	var tasksLst = new Sequence;
	if (s.right.isDefined()){tasksLst.addAll(s.right.`tasks`.select(i|true));}
	if (s.left.isDefined()){tasksLst.addAll(s.left.`tasks`.select(i|not tasksLst.exists(j|exs.get(j) == exs.get(i))));}
	for (tas_ : Task in tasksLst){
		if (not(s.differences.select(i|i.isTypeOf(Source!ReferenceChange)).exists(i|i.reference.name = 'tasks' and i.value = tas_))){
			var Ind = new Target!matchpsl::Indtasks_Project;
			Ind.from = t;
			Ind.`to` ::= exs.get(tas_);
		} 
	}
	var peopleLst = new Sequence;
	if (s.right.isDefined()){peopleLst.addAll(s.right.`people`.select(i|true));}
	if (s.left.isDefined()){peopleLst.addAll(s.left.`people`.select(i|not peopleLst.exists(j|exs.get(j) == exs.get(i))));}
	for (per_ : Person in peopleLst){
		if (not(s.differences.select(i|i.isTypeOf(Source!ReferenceChange)).exists(i|i.reference.name = 'people' and i.value = per_))){
			var Ind = new Target!matchpsl::Indpeople_Project;
			Ind.from = t;
			Ind.`to` ::= exs.get(per_);
		} 
	}
	}
	rule pslDifProjecttasks

	transform s : Source!ReferenceChange
	to Ind : Target!matchpsl::Indtasks_Project
	{
	
	guard : (s.match.left.isTypeOf(Source!psl::Project) or s.match.right.isTypeOf(Source!psl::Project)) and s.reference.name = 'tasks'
	if (s.match.right.isDefined()) {
	Ind.from = exs.get(s.match.right).equivalent();
	} else {Ind.from = exs.get(s.match.left).equivalent();}
	Ind.`to` = exs.get(s.value).equivalent();
	Ind.GenRequires ::= s.requires;
	if (s.kind = DifferenceKind#ADD){Ind.GenType = Target!GenTypes#add;}
	if (s.kind = DifferenceKind#DELETE){Ind.GenType = Target!GenTypes#del;}
	if (s.kind = DifferenceKind#CHANGE){
	Ind.GenType = Target!GenTypes#add;
	var other = new  Target!matchpsl::Indtasks_Project;
	if (s.match.right.isDefined() and s.value = s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('tasks'))){
	other.`to` = exs.get(s.match.left.eGet(s.match.left.eClass().getEStructuralFeature('tasks'))).equivalent();
	} else {other.`to` = exs.get(s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('tasks'))).equivalent();}
	other.from = exs.get(s.match.right).equivalent();
	other.GenType = Target!GenTypes#del;
	Ind.GenIs.add(other);
	}
	

}	rule pslDifProjectpeople

	transform s : Source!ReferenceChange
	to Ind : Target!matchpsl::Indpeople_Project
	{
	
	guard : (s.match.left.isTypeOf(Source!psl::Project) or s.match.right.isTypeOf(Source!psl::Project)) and s.reference.name = 'people'
	if (s.match.right.isDefined()) {
	Ind.from = exs.get(s.match.right).equivalent();
	} else {Ind.from = exs.get(s.match.left).equivalent();}
	Ind.`to` = exs.get(s.value).equivalent();
	Ind.GenRequires ::= s.requires;
	if (s.kind = DifferenceKind#ADD){Ind.GenType = Target!GenTypes#add;}
	if (s.kind = DifferenceKind#DELETE){Ind.GenType = Target!GenTypes#del;}
	if (s.kind = DifferenceKind#CHANGE){
	Ind.GenType = Target!GenTypes#add;
	var other = new  Target!matchpsl::Indpeople_Project;
	if (s.match.right.isDefined() and s.value = s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('people'))){
	other.`to` = exs.get(s.match.left.eGet(s.match.left.eClass().getEStructuralFeature('people'))).equivalent();
	} else {other.`to` = exs.get(s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('people'))).equivalent();}
	other.from = exs.get(s.match.right).equivalent();
	other.GenType = Target!GenTypes#del;
	Ind.GenIs.add(other);
	}
	

}rule pslFORTask 
	transform s : Source!Match
	to t : Target!matchpsl::matchTask
	{
	guard : s.left.isTypeOf(Source!psl::Task) or s.right.isTypeOf(Source!psl::Task)
	
	if (s.differences.exists(t|t.isTypeOf(Source!AttributeChange))){
		var left = new Target!matchpsl::matchTask;
		left.title = s.left.title;
		left.start = s.left.start;
		left.duration = s.left.duration;
		t.old = left;
	}
	
	if (s.right.isDefined()) {
		t.title = s.right.title;
		t.start = s.right.start;
		t.duration = s.right.duration;
	} else {
		t.title = s.left.title;
		t.start = s.left.start;
		t.duration = s.left.duration;
}
	
	var effortLst = new Sequence;
	if (s.right.isDefined()){effortLst.addAll(s.right.`effort`.select(i|true));}
	if (s.left.isDefined()){effortLst.addAll(s.left.`effort`.select(i|not effortLst.exists(j|exs.get(j) == exs.get(i))));}
	for (eff_ : Effort in effortLst){
		if (not(s.differences.select(i|i.isTypeOf(Source!ReferenceChange)).exists(i|i.reference.name = 'effort' and i.value = eff_))){
			var Ind = new Target!matchpsl::Indeffort_Task;
			Ind.from = t;
			Ind.`to` ::= exs.get(eff_);
		} 
	}
	var dependenciesLst = new Sequence;
	if (s.right.isDefined()){dependenciesLst.addAll(s.right.`dependencies`.select(i|true));}
	if (s.left.isDefined()){dependenciesLst.addAll(s.left.`dependencies`.select(i|not dependenciesLst.exists(j|exs.get(j) == exs.get(i))));}
	for (tas_ : Task in dependenciesLst){
		if (not(s.differences.select(i|i.isTypeOf(Source!ReferenceChange)).exists(i|i.reference.name = 'dependencies' and i.value = tas_))){
			var Ind = new Target!matchpsl::Inddependencies_Task;
			Ind.from = t;
			Ind.`to` ::= exs.get(tas_);
		} 
	}
	var deliverablesLst = new Sequence;
	if (s.right.isDefined()){deliverablesLst.addAll(s.right.`deliverables`.select(i|true));}
	if (s.left.isDefined()){deliverablesLst.addAll(s.left.`deliverables`.select(i|not deliverablesLst.exists(j|exs.get(j) == exs.get(i))));}
	for (del_ : Deliverable in deliverablesLst){
		if (not(s.differences.select(i|i.isTypeOf(Source!ReferenceChange)).exists(i|i.reference.name = 'deliverables' and i.value = del_))){
			var Ind = new Target!matchpsl::Inddeliverables_Task;
			Ind.from = t;
			Ind.`to` ::= exs.get(del_);
		} 
	}
	}
	rule pslDifTaskeffort

	transform s : Source!ReferenceChange
	to Ind : Target!matchpsl::Indeffort_Task
	{
	
	guard : (s.match.left.isTypeOf(Source!psl::Task) or s.match.right.isTypeOf(Source!psl::Task)) and s.reference.name = 'effort'
	if (s.match.right.isDefined()) {
	Ind.from = exs.get(s.match.right).equivalent();
	} else {Ind.from = exs.get(s.match.left).equivalent();}
	Ind.`to` = exs.get(s.value).equivalent();
	Ind.GenRequires ::= s.requires;
	if (s.kind = DifferenceKind#ADD){Ind.GenType = Target!GenTypes#add;}
	if (s.kind = DifferenceKind#DELETE){Ind.GenType = Target!GenTypes#del;}
	if (s.kind = DifferenceKind#CHANGE){
	Ind.GenType = Target!GenTypes#add;
	var other = new  Target!matchpsl::Indeffort_Task;
	if (s.match.right.isDefined() and s.value = s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('effort'))){
	other.`to` = exs.get(s.match.left.eGet(s.match.left.eClass().getEStructuralFeature('effort'))).equivalent();
	} else {other.`to` = exs.get(s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('effort'))).equivalent();}
	other.from = exs.get(s.match.right).equivalent();
	other.GenType = Target!GenTypes#del;
	Ind.GenIs.add(other);
	}
	

}	rule pslDifTaskdependencies

	transform s : Source!ReferenceChange
	to Ind : Target!matchpsl::Inddependencies_Task
	{
	
	guard : (s.match.left.isTypeOf(Source!psl::Task) or s.match.right.isTypeOf(Source!psl::Task)) and s.reference.name = 'dependencies'
	if (s.match.right.isDefined()) {
	Ind.from = exs.get(s.match.right).equivalent();
	} else {Ind.from = exs.get(s.match.left).equivalent();}
	Ind.`to` = exs.get(s.value).equivalent();
	Ind.GenRequires ::= s.requires;
	if (s.kind = DifferenceKind#ADD){Ind.GenType = Target!GenTypes#add;}
	if (s.kind = DifferenceKind#DELETE){Ind.GenType = Target!GenTypes#del;}
	if (s.kind = DifferenceKind#CHANGE){
	Ind.GenType = Target!GenTypes#add;
	var other = new  Target!matchpsl::Inddependencies_Task;
	if (s.match.right.isDefined() and s.value = s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('dependencies'))){
	other.`to` = exs.get(s.match.left.eGet(s.match.left.eClass().getEStructuralFeature('dependencies'))).equivalent();
	} else {other.`to` = exs.get(s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('dependencies'))).equivalent();}
	other.from = exs.get(s.match.right).equivalent();
	other.GenType = Target!GenTypes#del;
	Ind.GenIs.add(other);
	}
	

}	rule pslDifTaskdeliverables

	transform s : Source!ReferenceChange
	to Ind : Target!matchpsl::Inddeliverables_Task
	{
	
	guard : (s.match.left.isTypeOf(Source!psl::Task) or s.match.right.isTypeOf(Source!psl::Task)) and s.reference.name = 'deliverables'
	if (s.match.right.isDefined()) {
	Ind.from = exs.get(s.match.right).equivalent();
	} else {Ind.from = exs.get(s.match.left).equivalent();}
	Ind.`to` = exs.get(s.value).equivalent();
	Ind.GenRequires ::= s.requires;
	if (s.kind = DifferenceKind#ADD){Ind.GenType = Target!GenTypes#add;}
	if (s.kind = DifferenceKind#DELETE){Ind.GenType = Target!GenTypes#del;}
	if (s.kind = DifferenceKind#CHANGE){
	Ind.GenType = Target!GenTypes#add;
	var other = new  Target!matchpsl::Inddeliverables_Task;
	if (s.match.right.isDefined() and s.value = s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('deliverables'))){
	other.`to` = exs.get(s.match.left.eGet(s.match.left.eClass().getEStructuralFeature('deliverables'))).equivalent();
	} else {other.`to` = exs.get(s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('deliverables'))).equivalent();}
	other.from = exs.get(s.match.right).equivalent();
	other.GenType = Target!GenTypes#del;
	Ind.GenIs.add(other);
	}
	

}rule pslFORPerson 
	transform s : Source!Match
	to t : Target!matchpsl::matchPerson
	{
	guard : s.left.isTypeOf(Source!psl::Person) or s.right.isTypeOf(Source!psl::Person)
	
	if (s.differences.exists(t|t.isTypeOf(Source!AttributeChange))){
		var left = new Target!matchpsl::matchPerson;
		left.name = s.left.name;
		t.old = left;
	}
	
	if (s.right.isDefined()) {
		t.name = s.right.name;
	} else {
		t.name = s.left.name;
}
	
	}
rule pslFOREffort 
	transform s : Source!Match
	to t : Target!matchpsl::matchEffort
	{
	guard : s.left.isTypeOf(Source!psl::Effort) or s.right.isTypeOf(Source!psl::Effort)
	
	if (s.differences.exists(t|t.isTypeOf(Source!AttributeChange))){
		var left = new Target!matchpsl::matchEffort;
		left.percentage = s.left.percentage;
		t.old = left;
	}
	
	if (s.right.isDefined()) {
		t.percentage = s.right.percentage;
	} else {
		t.percentage = s.left.percentage;
}
	
	var taskLst = new Sequence;
	if (s.right.isDefined()){taskLst.addAll(s.right.`task`.select(i|true));}
	if (s.left.isDefined()){taskLst.addAll(s.left.`task`.select(i|not taskLst.exists(j|exs.get(j) == exs.get(i))));}
	for (tas_ : Task in taskLst){
		if (not(s.differences.select(i|i.isTypeOf(Source!ReferenceChange)).exists(i|i.reference.name = 'task' ))){
			var Ind = new Target!matchpsl::Indtask_Effort;
			Ind.from = t;
			Ind.`to` ::= exs.get(tas_);
		} 
	}
	var personLst = new Sequence;
	if (s.right.isDefined()){personLst.addAll(s.right.`person`.select(i|true));}
	if (s.left.isDefined()){personLst.addAll(s.left.`person`.select(i|not personLst.exists(j|exs.get(j) == exs.get(i))));}
	for (per_ : Person in personLst){
		if (not(s.differences.select(i|i.isTypeOf(Source!ReferenceChange)).exists(i|i.reference.name = 'person' ))){
			var Ind = new Target!matchpsl::Indperson_Effort;
			Ind.from = t;
			Ind.`to` ::= exs.get(per_);
		} 
	}
	}
	rule pslDifEfforttask

	transform s : Source!ReferenceChange
	to Ind : Target!matchpsl::Indtask_Effort
	{
	
	guard : (s.match.left.isTypeOf(Source!psl::Effort) or s.match.right.isTypeOf(Source!psl::Effort)) and s.reference.name = 'task'
	if (s.match.right.isDefined()) {
	Ind.from = exs.get(s.match.right).equivalent();
	} else {Ind.from = exs.get(s.match.left).equivalent();}
	Ind.`to` = exs.get(s.value).equivalent();
	Ind.GenRequires ::= s.requires;
	if (s.kind = DifferenceKind#ADD){Ind.GenType = Target!GenTypes#add;}
	if (s.kind = DifferenceKind#DELETE){Ind.GenType = Target!GenTypes#del;}
	if (s.kind = DifferenceKind#CHANGE){
	Ind.GenType = Target!GenTypes#add;
	var other = new  Target!matchpsl::Indtask_Effort;
	if (s.match.right.isDefined() and s.value = s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('task'))){
	other.`to` = exs.get(s.match.left.eGet(s.match.left.eClass().getEStructuralFeature('task'))).equivalent();
	} else {other.`to` = exs.get(s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('task'))).equivalent();}
	other.from = exs.get(s.match.right).equivalent();
	other.GenType = Target!GenTypes#del;
	Ind.GenIs.add(other);
	}
	

}	rule pslDifEffortperson

	transform s : Source!ReferenceChange
	to Ind : Target!matchpsl::Indperson_Effort
	{
	
	guard : (s.match.left.isTypeOf(Source!psl::Effort) or s.match.right.isTypeOf(Source!psl::Effort)) and s.reference.name = 'person'
	if (s.match.right.isDefined()) {
	Ind.from = exs.get(s.match.right).equivalent();
	} else {Ind.from = exs.get(s.match.left).equivalent();}
	Ind.`to` = exs.get(s.value).equivalent();
	Ind.GenRequires ::= s.requires;
	if (s.kind = DifferenceKind#ADD){Ind.GenType = Target!GenTypes#add;}
	if (s.kind = DifferenceKind#DELETE){Ind.GenType = Target!GenTypes#del;}
	if (s.kind = DifferenceKind#CHANGE){
	Ind.GenType = Target!GenTypes#add;
	var other = new  Target!matchpsl::Indperson_Effort;
	if (s.match.right.isDefined() and s.value = s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('person'))){
	other.`to` = exs.get(s.match.left.eGet(s.match.left.eClass().getEStructuralFeature('person'))).equivalent();
	} else {other.`to` = exs.get(s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('person'))).equivalent();}
	other.from = exs.get(s.match.right).equivalent();
	other.GenType = Target!GenTypes#del;
	Ind.GenIs.add(other);
	}
	

}rule pslFORDeliverable 
	transform s : Source!Match
	to t : Target!matchpsl::matchDeliverable
	{
	guard : s.left.isTypeOf(Source!psl::Deliverable) or s.right.isTypeOf(Source!psl::Deliverable)
	
	if (s.differences.exists(t|t.isTypeOf(Source!AttributeChange))){
		var left = new Target!matchpsl::matchDeliverable;
		left.title = s.left.title;
		left.due = s.left.due;
		t.old = left;
	}
	
	if (s.right.isDefined()) {
		t.title = s.right.title;
		t.due = s.right.due;
	} else {
		t.title = s.left.title;
		t.due = s.left.due;
}
	
	var leadLst = new Sequence;
	if (s.right.isDefined()){leadLst.addAll(s.right.`lead`.select(i|true));}
	if (s.left.isDefined()){leadLst.addAll(s.left.`lead`.select(i|not leadLst.exists(j|exs.get(j) == exs.get(i))));}
	for (per_ : Person in leadLst){
		if (not(s.differences.select(i|i.isTypeOf(Source!ReferenceChange)).exists(i|i.reference.name = 'lead' ))){
			var Ind = new Target!matchpsl::Indlead_Deliverable;
			Ind.from = t;
			Ind.`to` ::= exs.get(per_);
		} 
	}
	}
	rule pslDifDeliverablelead

	transform s : Source!ReferenceChange
	to Ind : Target!matchpsl::Indlead_Deliverable
	{
	
	guard : (s.match.left.isTypeOf(Source!psl::Deliverable) or s.match.right.isTypeOf(Source!psl::Deliverable)) and s.reference.name = 'lead'
	if (s.match.right.isDefined()) {
	Ind.from = exs.get(s.match.right).equivalent();
	} else {Ind.from = exs.get(s.match.left).equivalent();}
	Ind.`to` = exs.get(s.value).equivalent();
	Ind.GenRequires ::= s.requires;
	if (s.kind = DifferenceKind#ADD){Ind.GenType = Target!GenTypes#add;}
	if (s.kind = DifferenceKind#DELETE){Ind.GenType = Target!GenTypes#del;}
	if (s.kind = DifferenceKind#CHANGE){
	Ind.GenType = Target!GenTypes#add;
	var other = new  Target!matchpsl::Indlead_Deliverable;
	if (s.match.right.isDefined() and s.value = s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('lead'))){
	other.`to` = exs.get(s.match.left.eGet(s.match.left.eClass().getEStructuralFeature('lead'))).equivalent();
	} else {other.`to` = exs.get(s.match.right.eGet(s.match.right.eClass().getEStructuralFeature('lead'))).equivalent();}
	other.from = exs.get(s.match.right).equivalent();
	other.GenType = Target!GenTypes#del;
	Ind.GenIs.add(other);
	}
	

}		



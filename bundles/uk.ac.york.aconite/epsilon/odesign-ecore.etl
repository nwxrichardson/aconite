/*********************************************************************
 * Copyright (c) 2024 University of York, Rolls-Royce Controls
 *
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 **********************************************************************/

import "config.eol";

pre {
var classes = Source.allContents.selectByType(Source!EClass);
}

operation Any toValue() : String{
	if (self.isKindOf(Collection)){
	return self.concat(", ");
	}
	return self.asString();
}

/*
 * Get the value of as a string from the details or the default
 * This is the fundemantal building block 
 */
operation Source!EAnnotation getVal(key : String) : String{

	var tmp = self.details.selectOne(i|i.key = key);
	if (tmp.isDefined()){
	return tmp.value;
	}
	return self.getDefault(key);

}

// Backup function that can be called with a new default
operation Source!EAnnotation getVal(key : String, def : String) : String{
	var rtn = self.getVal(key);
	if (rtn != ""){return rtn;}
	return def;

}

operation Any getDetails() : Map{
	var tmp = self.eClass.eAllAttributes;
	return tmp.aggregate(i|i.name,self.eGet(i).toValue());
}

operation Any container() : Any {
	var rtn = self.eContainer;
	if (rtn.isTypeOf(Odesign!Layer)){
		return rtn.eContainer;
	} return rtn;
}

rule Package2Package
	transform s : Source!EPackage
	to t : Target!EPackage{
	var aconite = (new Target!EAnnotation);
	aconite.source = "aconite";
	t.name = s.name;
	t.nsPrefix = s.nsPrefix;
	t.nsURI = s.nsURI;
	t.eClassifiers ::= s.eClassifiers;
	t.eFactoryInstance ::= s.eFactoryInstance;
	t.eSubpackages ::= s.eSubpackages;
	t.eAnnotations = s.eAnnotations;
	t.eAnnotations.add(aconite);
	}
	
rule Class2Class
	transform s : Source!EClass
	to t : Target!EClass {
	t.name = s.name;
	t.interface = s.interface;
	t.instanceTypeName = s.instanceTypeName;
	t.instanceClassName = s.instanceClassName;
	t.eTypeParameters ::= s.eTypeParameters;
	t.eSuperTypes ::= s.eSuperTypes;
	t.eStructuralFeatures ::= s.eStructuralFeatures;
	t.eOperations = s.eOperations;
	}
	
rule Ref2Ref
	transform s : Source!EReference
	to t : Target!EReference{
	t.containment = s.containment;
	t.eKeys = s.eKeys;
	t.eOpposite ::= s.eOpposite;
	
	t.name = s.name;
	t.changeable = s.changeable;
	t.defaultValueLiteral = s.defaultValueLiteral;
	t.derived = s.derived;
	t.eAnnotations = s.eAnnotations;
	t.eGenericType ::= s.eGenericType;
	t.eType ::= s.eType;
	t.lowerBound = s.lowerBound;
	t.ordered = s.ordered;
	t.transient = s.transient;
	t.unique = s.unique;
	t.unsettable = s.unsettable;
	t.upperBound = s.upperBound;
	t.volatile = s.volatile;
	}
	
rule Attr2Attr
	transform s : Source!EAttribute
	to t : Target!EAttribute{
	t.iD = s.iD;
	
	t.name = s.name;
	t.changeable = s.changeable;
	t.defaultValueLiteral = s.defaultValueLiteral;
	t.derived = s.derived;
	t.eAnnotations = s.eAnnotations;
	t.eGenericType ::= s.eGenericType;
	t.eType = s.eType;
	t.lowerBound = s.lowerBound;
	t.ordered = s.ordered;
	t.transient = s.transient;
	t.unique = s.unique;
	t.unsettable = s.unsettable;
	t.upperBound = s.upperBound;
	t.volatile = s.volatile;
	}
	
rule Diagram2Annotation
	transform s : Odesign!DiagramDescription
	to t : Target!EAnnotation {
	t.source = "aconite.diagram";
	var clazz = s.domainClass.split("::");
	t.eModelElement = classes.select(i|i.name = clazz.get(1)).selectOne(i|i.ePackage.name = clazz.get(0)).equivalent();
	
	t.details.put("name",s.name);
	s.defaultLayer.nodeMappings.equivalent().collect(i|i.details.put("container",s.name));
	s.defaultLayer.containerMappings.equivalent().collect(i|i.details.put("container",s.name));
	s.defaultLayer.edgeMappings.equivalent().collect(i|i.details.put("container",s.name));
	}
	
@lazy
rule Node2Annotation
	transform s : Odesign!NodeMapping
	to t : Target!EAnnotation {
	t.source = "aconite.node";
	var clazz = s.domainClass.split("::");
	t.eModelElement = classes.select(i|i.name = clazz.get(1)).selectOne(i|i.ePackage.name = clazz.get(0)).equivalent();
	t.details.put("container", s.container().equivalent().getVal("name"));
	t.details.putAll(s.getDetails());
	var style = s.style.equivalent();
	if (style.isDefined()) {
		style.eModelElement = t.eModelElement;
		style.details.put("node", t.getVal("name"));
	}
	}
	
@lazy
rule Container2Annotation
	transform s : Odesign!ContainerMapping
	to t : Target!EAnnotation {
	t.source = "aconite.container";
	var clazz = s.domainClass.split("::");
	t.eModelElement = classes.select(i|i.name = clazz.get(1)).selectOne(i|i.ePackage.name = clazz.get(0)).equivalent();
	//TODO Manage subnodes
	t.details.putAll(s.getDetails());
	var style = s.style.equivalent();
	if (style.isDefined()) {
		style.eModelElement = t.eModelElement;
		style.details.put("node",t.getVal("name"));
	}
	}

//Manage all of the different styles
//Manage all of the references
@lazy	
rule SquareDescription2Annotation
	transform s : Odesign!SquareDescription
	to t : Target!EAnnotation{
	t.source = "aconite.node.description";
	t.details.putall(s.getDetails());
	t.details.put("color", s.color.name);
	}
	
@lazy	
rule FlatDescription2Annotation
	transform s : Odesign!FlatContainerStyle
	to t : Target!EAnnotation{
	t.source = "aconite.container.description";
	t.details.putall(s.getDetails());
	}
	
@lazy
rule EdgeMapping2Annotation
	transform s : Odesign!EdgeMapping
	to t : Target!EAnnotation{
	t.source = "aconite.edge";
	t.details.putAll(s.getDetails());
	t.details.remove("useDomainElement");
	//Alter this to swap to target from targetFinderExpression
	if (s.useDomainElement){
		var clazz = s.domainClass.split("::");
		t.eModelElement = classes.select(i|i.name = clazz.get(1)).selectOne(i|i.ePackage.name = clazz.get(0)).equivalent();
		t.details.put("targetNode", s.targetMapping.equivalent().collect(i|i.getVal("name")).asSet().toValue());
	} else {
		var sourceNodes = s.sourceMapping.equivalent().asSet();
		t.eModelElement = sourceNodes.eModelElement.first().eAllReferences.selectOne(i|i.name = s.targetFinderExpression.split("\\.").get(1));		
		t.details.put("sourceNode", sourceNodes.collect(i|i.getVal("name")).toValue());
		t.details.put("targetNode", s.targetMapping.equivalent().collect(i|i.getVal("name")).asSet().toValue());
	}
	}
	
post {
var annotations = Target.allContents.selectByType(Target!EAnnotation).select(i|i.source.startsWith("aconite")).flatten();
//Filter Out Duplicates
for (i in annotations){
	i.details.remove("domainClass");
	var toRemove = Set{};
	for (j in i.details) {
		i.getFinDef(j.getKey()).println();
		j.getValue.println();
		if (j.getValue = i.getFinDef(j.getKey())){
			toRemove.add(j.getKey());
		}
	} for (rmv in toRemove) {i.details.remove(rmv);}
}
}
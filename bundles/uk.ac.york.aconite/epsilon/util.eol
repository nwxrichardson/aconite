//Warning Any and slight inefficency if inheritance is wrong
	
	operation Any getRoute(target : Any) : String {
	var seen = Set{self};
	var curSize = -1;
	var routes = self.eAllReferences.invert().aggregate(i|i.eType, "." + i.name);
	var supers = target.closure(i|i.eSuperTypes);
	supers.add(target);
	while ((not routes.keySet().exists(i|supers.contains(i))) and seen.size() > curSize){
	curSize = seen.size();
	seen.addAll(routes.keySet());	
	var newRoutes = new Map;
	for (i in routes.keySet()){
		newRoutes.putAll(i.eAllReferences.invert().aggregate(j|j.eType,routes.get(i) + "." + j.name ));
	}
	for (i in seen){
		newRoutes.remove(i);
	}
	routes = newRoutes;
	}
	
	if (not routes.keySet().exists(i|supers.contains(i))){
		if (self = target) {return "";}
		return ".eAllContents()";
	}
	
	target = target.asSet();
	var options = Sequence{};
	while (target != 0){
		
		options = Sequence{};
		for (pos : Source!EClass in target){
			if (routes.containsKey(pos)){
				options.add(routes.get(pos));
			}
		}
		if (options.size() != 0){
			if (options.size() = 1){return options.first();}
			return options.sortBy(i|i.asSequence().count(".")).first();
		}
		target = target.collect(i|i.eSuperTypes).flatten();
	}
	
}
//Could be made more effiecent if you can pass a limit which stops if it is going to be longer than any previous solution
//Also need fixing to manage multiple of the same type at a specific level
